
#=======MAKE HEADER===========================================================#
# This header contains information about target architecture and machine,
# directory tree and tool-chain flags. It also holds information needed to
# generate the final OS image.
#
# Macros and global variables should be put here.
#=============================================================================#


#_______SYSTEM INFORMATION____________________________________________________#

# target architecture
TARGET 	 := ia32
MACHNAME := pc

#_______DIRECTORIES___________________________________________________________#

TOP   := $(abspath $(dir $(filter %makeinc, $(MAKEFILE_LIST))))
APP   := $(TOP)/app
BIN   := $(TOP)/bin
DOCS  := $(TOP)/docs
IMG   := $(TOP)/img
INC   := $(TOP)/include
SRC   := $(TOP)/src
TOOLS := $(TOP)/tools

# source code directories
ARCH  := $(SRC)/arch
BOOT  := $(SRC)/boot
MACH  := $(SRC)/machine
STD   := $(SRC)/std
TEST  := $(SRC)/test

# target-specific directories
TRGT_ARCH := $(ARCH)/$(TARGET)
TRGT_MACH := $(MACH)/$(MACHNAME)

# bootloader image directory
GRUB  := $(IMG)/boot

#_______TOOL-CHAIN____________________________________________________________#

AS    := $(TOOLS)/cross/bin/$(TARGET)-as
CC    := $(TOOLS)/cross/bin/$(TARGET)-gcc
CXX   := $(TOOLS)/cross/bin/$(TARGET)-g++
LD    := $(TOOLS)/cross/bin/$(TARGET)-ld
STRIP := $(TOOLS)/cross/bin/$(TARGET)-strip

#_______FLAGS_________________________________________________________________#

CFLAGS := -I $(INC)

# C-preprocessor flags (used to generate .d files)
CPPFLAGS := -MD -MP

CXXFLAGS := -I $(INC)
CXXFLAGS += -ffreestanding -fno-exceptions
CXXFLAGS += -fno-rtti -nostdinc -fno-asynchronous-unwind-tables
CXXFLAGS += --no-use-cxa-atexit -std=c++0x
CXXFLAGS   += $(_ALL_CXXFLAGS) $(_DEBUG_CXXFLAGS)

LDFLAGS  := -static -nostdlib \
	-L $(patsubst %/libgcc.a,%/,$(shell $(CXX) -print-libgcc-file-name)) \
	-T $(TRGT_ARCH)/link.ld

MAKEFLAGS  += --no-print-directory

#_______OS IMAGE______________________________________________________________#


#=======CONCURRENT BUILDS=====================================================#
# The current version of the makefile supports having two concurrent builds
# compiled at the same time: release and debug. However, the build system only
# holds one object file for each .c/.cc file (to avoid cluttering?). Thus,
# there is a need to keep track of which build is currently compiled
# (.debug.lock).
#
# There is also a need to suplement CXXFLAGS and FATBIN with additional flags
# based on which build currently has it's .o files. I.g, a release build
# requires -O2 for CXXFLAGS whilst debug requires -O0, conflicting needs indeed.
# We fix this demand by checking for the presence of .debug.lock (which all
# removes and debug touches) and passing extra parameters to sub-makes.
#
# The advantage of this decision is that there is no need to clear all .o files
# in subsequents compilations of either build.
#=============================================================================#


_DEBUG_EXT :=

FATBIN = $(addsuffix $(_DEBUG_EXT),$(GRUB)/brae.bin)
ISOFILE := brae.iso
