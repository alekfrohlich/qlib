# target architecture
TARGET 	 := ia32
MACHNAME := pc

#_______DIRECTORIES___________________________________________________________#

# project level directories
TOP   := $(abspath $(dir $(filter %makedefs, $(MAKEFILE_LIST))))
APP   := $(TOP)/app
BIN   := $(TOP)/bin
DOCS  := $(TOP)/docs
IMG   := $(TOP)/img
INC   := $(TOP)/include
SRC   := $(TOP)/src
TOOLS := $(TOP)/tools

# source code directories
ARCH  := $(SRC)/architecture
MACH  := $(SRC)/machine

# rename this
TRGT_ARCH := $(ARCH)/$(TARGET)
TRGT_MACH := $(MACH)/$(MACHNAME)

# bootloader image directory
GRUB  := $(IMG)/boot

#_______TOOL-CHAIN____________________________________________________________#

AS    := $(TOOLS)/cross/bin/$(TARGET)-as
CC    := $(TOOLS)/cross/bin/$(TARGET)-gcc
CXX   := $(TOOLS)/cross/bin/$(TARGET)-g++
LD    := $(TOOLS)/cross/bin/$(TARGET)-ld
STRIP := $(TOOLS)/cross/bin/$(TARGET)-strip

#_______FLAGS_________________________________________________________________#

ASFLAGS :=

CFLAGS := -I $(INC)

CXXFLAGS := -I $(INC)
CXXFLAGS += -ffreestanding -fno-exceptions
CXXFLAGS += -fno-rtti -nostdinc -fno-asynchronous-unwind-tables
CXXFLAGS += --no-use-cxa-atexit -std=c++2a

LDFLAGS  := -static -nostdlib \
	-L $(patsubst %/libgcc.a,%/,$(shell $(CXX) -print-libgcc-file-name)) \
	-T $(TRGT_ARCH)/link.ld

MAKEFLAGS  += --no-print-directory

#________APP IMAGE____________________________________________________________#

IMAGE := bootable_app.iso

#________BUILD________________________________________________________________#

# the path of included files changes based on the chosen target (release/debug)
ifeq (, $(filter debug, $(MAKECMDGOALS)))
	BUILD := $(TOP)/build/release
	CXXFLAGS += -O2
	BINARY := $(GRUB)/runnable_app.release
else
	BUILD := $(TOP)/build/debug
	CXXFLAGS += -g -O2
	BINARY := $(GRUB)/runnable_app.debug
endif

OTHER_RULES := format install-cross uninstall-cross install-directories \
	preprocessor-output clean veryclean


#________COMMON SOURCE CODE___________________________________________________#

SRC_DIR_TREE   := $(shell find $(SRC) -type d)
BUILD_DIR_TREE := $(subst $(SRC),$(BUILD),$(SRC_DIR_TREE))

INCLUDES := $(foreach dir, $(SRC_DIR_TREE), $(addprefix -I, $(dir)))

VPATH := $(SRC_DIR_TREE)

CXX_SRC := $(foreach dir,$(SRC_DIR_TREE),$(wildcard $(dir)/*.cc))

APP_CXX_SRC := $(wildcard $(APP)/$(APPLICATION).cc)
APP_OBJS := $(APP_CXX_SRC:.cc=.o)

OBJS := $(subst $(SRC),$(BUILD),$(CXX_SRC:.cc=.o))
DEPS := $(OBJS:.o=.d)